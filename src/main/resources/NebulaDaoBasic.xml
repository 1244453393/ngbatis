<mapper namespace="ye.weicheng.ngbatis.proxy.NebulaDaoBasic">

    <select id="selectBySelective">
        MATCH (n:${ tag })
        @if ( isNotEmpty(columns) ) {
            WHERE
            @for ( col in columns ) {
                n.${ tag }.${ col } == ${ @valueColumns.get( colLP.index - 1 ) }
                @if (!colLP.last) {
                    and
                @}
            @}
        @}
        RETURN n
        LIMIT 4000
    </select>

    <delete id="deleteLogicById">
        DELETE VERTEX ${ id } WITH EDGE
    </delete>

    <delete id="deleteById"></delete>

    <insert id="insert">
        INSERT VERTEX `${ table }` (
                @for ( col in columns ) {
                    `${ col }`  ${ colLP.last ? '' : ',' }
                @}
            )
            VALUES ${ vId } : (
                @for ( val in valueColumns ) {
                    ${ val } ${ valLP.last ? '' : ',' }
                @}
            );
    </insert>

    <insert id="insertSelective">
        INSERT VERTEX `${ table }` (
            @for ( col in columns ) {
                `${ col }`  ${ colLP.last ? '' : ',' }
            @}
        )
        VALUES ${ vId } : (
            @for ( val in valueColumns ) {
                ${ val } ${ valLP.last ? '' : ',' }
            @}
        );
    </insert>

    <select id="selectById"></select>

    <select id="selectByIds"></select>

    <select id="selectBySelective"></select>

    <select id="selectBySelectivePrecise"/>
    <select id="selectByMap"/>
    <select id="countByMap"/>
    <select id="selectIdBySelective"/>
    <select id="updateByIdSelective"/>
    <select id="updateByIdWithBLOBs"/>
    <select id="updateById"/>
    <select id="insertBatch"/>
    <select id="countGridByMap"/>
    <select id="selectGridByMap"/>
    <select id="updateSelective"/>
    <select id="selectPage">
        MATCH (n:${ tag })
        @if ( isNotEmpty(columns) ) {
            WHERE
            @for ( col in columns ) {
                n.${ tag }.${ col } == ${ @valueColumns.get( colLP.index - 1 ) } ${ !colLP.last ? 'and' : '' }
            @}
        @}
        RETURN n skip $startRow limit $pageSize
    </select>

    <select id="countPage">
        MATCH (n:${ tag })
        @if ( isNotEmpty(columns) ) {
        WHERE
            @for ( col in columns ) {
                n.${ tag }.${ col } == ${ @valueColumns.get( colLP.index - 1 ) } ${ !colLP.last ? 'and' : '' }
            @}
        @}
        RETURN count(n)
    </select>

    <select id="updateBatch"/>

    <insert id="insertEdge">
        INSERT EDGE `${ e }` (
        @for ( col in columns ) {
            `${ col }`
            @if (!colLP.last) {
                ,
            @}
        @}
        )
        VALUES ${ eId1 }-> ${ eId2 } :(
        @for ( val in valueColumns ) {
            ${ val }
            @if (!valLP.last) {
            ,
            @}
        @}
        );
    </insert>

    <select id="existsEdge">
        MATCH (n)-[r: ${ p1 }]-(n2)
        WHERE id(n) == $p0 AND id(n2) == $p2
        RETURN count(*) > 0
    </select>

    <select id="listStartNodes">
        MATCH (n: `${ p0 }`)-[r: `${ p1 }`]->(n2)
        WHERE id(n2) == $p2
        RETURN n
    </select>

</mapper>